class Person

  attr_accessor :fname, :mname, :lname
  attr_accessor :dob, :fav_color, :pet
  attr_accessor :hair_color, :eye_color, :skin_color

# Mapped initializer
def initialize(params = {})
    @fname = params[:fname] || ''
    @mname = params[:mname] || ''
    @lname = params[:lname] || ''
    @dob = params[:dob] || ''
    @fav_color = params[:fav_color] || ''
    @pet = params[:pet] || ''
    @hair_color = params[:hair_color] || ''
    @eye_color = params[:eye_color] || ''
    @skin_color = params[:skin_color] || ''
    end

  end

p = Person.new(fname: 'Jeremy',
               mname: 'Mark',
               lname: 'Ottley',
               dob: 1988,
               fav_color: 'Black',
               pet: 'Misty',
               hair_color: 'Black',
               eye_color: 'Brown',
               skin_color: 'Brown'
              )

# Consider replacing the call to reject simple with compact: ARRAY.compact.join(' ')
# compact would remove elements that are nil while leaving empty strings
puts "Hello, and welcome. We have a new employee joining us today named #{[p.fname, p.mname, p.lname].reject(&:empty?).join(' ')}. Born in #{p.dob}, #{p.fname} will be our youngest team member. While his favorite color is #{p.fav_color}, Mr. #{p.lname} has an adorable cat named #{p.pet}. #{p.fname}'s hair is #{p.hair_color}, and his eyes are #{p.eye_color}, which match his #{p.skin_color} skin."

#puts "Hello, and welcome. We have a new employee joining us today named #{[p.fname, p.mname, p.lname].compact.join(' ')}.
